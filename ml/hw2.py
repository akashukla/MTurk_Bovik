# -*- coding: utf-8 -*-
"""HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EZm_KWg0TdHKw17O8O2d9oky6WgyDkM7

Digital Video: HW2

Arkan Abuyazid

Question 1
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir(os.getcwd()+'/drive/My Drive/Digital_Video/HW2')

print(os.getcwd())

import matplotlib.pyplot as plt
import numpy as np
from scipy import ndimage as ndi
import os

from skimage import data
from skimage.util import img_as_float
from skimage.filters import gabor_kernel

"""Function to compute features from the different kernels"""

# os.chdir(os.getcwd()+"/drive/My Drive/Digital_Video/HW2")
print(os.getcwd())

def compute_feats(image, kernels):
    feats = []
    for k, kernel in enumerate(kernels):
        filtered = ndi.convolve(image, kernel, mode='wrap')
        feats.append(filtered)
    return np.asarray(feats)

"""Initializing Gabor Kernels"""

n = 100
kernels = []
thetas = [i/4 * np.pi for i in range(3)]
frequencies = [(i+1) * n for i in range(4)]
for theta in thetas:
    sigma = 1
    for frequency in frequencies:
        kernel = np.real(gabor_kernel(frequency, theta=theta, sigma_x=sigma, sigma_y=sigma))
        kernels.append(kernel)

"""Loading images and extracting their features"""

im1 = img_as_float(data.load(os.getcwd()+'/G_im1.jpg', as_gray=True))
im2 = img_as_float(data.load(os.getcwd()+'/G_im2.jpg',as_gray=True))

feat1 = compute_feats(im1, kernels)
feat2 = compute_feats(im2, kernels)

fig, axs = plt.subplots(12,2,figsize=(10,45))

for i in range(len(thetas)):
    c = len(frequencies)
    for j in range(len(frequencies)):
        axs[c*i+j,0].imshow(feat1[i*j])
        axs[c*i+j,0].set_title('theta=%f; freq=%f' % (thetas[i], frequencies[j]))
        axs[c*i+j,1].imshow(feat2[i*j])
        axs[c*i+j,1].set_title('theta=%f; freq=%f' % (thetas[i], frequencies[j]))
fig.suptitle('Gabor Responses')

"""Question 2

Creating Dataset with different Gaussian Blurs
"""

import cv2
import os

kon_path = 'KonIQ-10k/'

# count = 0
# for im_path in os.listdir(kon_path+'224x224'):
#     src_path = kon_path+'224x224/'+im_path
#     im = cv2.imread(src_path)
#     for sigma in [0,2,4,8]:
#         if count < 7000:
#             dst_path = kon_path+'train/sigma=%d/%s' % (sigma,im_path)
#             print('Smoothing training image %s to sigma = %d' % (im_path, sigma))
#         else:
#             dst_path = kon_path+'val/sigma=%d/%s' % (sigma,im_path)
#             print('Smoothing evaluating image %s to sigma = %d' % (im_path, sigma))

#         # cv2.imshow("frame", im)
#         # cv2.waitKey(0)
#         # cv2.destroyAllWindows()

#         if sigma is not 0:
#             im = cv2.GaussianBlur(im, (0,0), sigmaX=sigma, sigmaY=sigma)

#         cv2.imwrite(dst_path, im)
#     count = count + 1

"""Creating neural network to train on this dataset"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy

kon_path = 'KonIQ-10k/'

data_transforms = {
    'train': transforms.Compose([
        transforms.ToTensor()
    ]),
    'val' : transforms.Compose([
        transforms.ToTensor()
    ])
}

image_set = {x: datasets.ImageFolder(os.path.join(kon_path,x),
                data_transforms[x])
                for x in ['train', 'val']}

dataloaders = {x: torch.utils.data.DataLoader(image_set[x], 
                batch_size=4, shuffle=True, num_workers=4) 
                for x in ['train', 'val']}

dataset_sizes = {x: len(image_set[x]) for x in ['train', 'val']}
class_names = image_set['train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

plt.ion()   # interactive mode

print(device)

def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
            if phase == 'train':
                scheduler.step()

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model

def visualize_model(model, num_images=6):
    was_training = model.training
    model.eval()
    images_so_far = 0
    fig = plt.figure()

    with torch.no_grad():
        for i, (inputs, labels) in enumerate(dataloaders['val']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)

def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated

model_conv = torchvision.models.resnet18(pretrained=True)
for param in model_conv.parameters():
    param.requires_grad = False

# Parameters of newly constructed modules have requires_grad=True by default
num_ftrs = model_conv.fc.in_features
model_conv.fc = nn.Linear(num_ftrs, 4)

model_conv = model_conv.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that only parameters of final layer are being optimized as
# opposed to before.
optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)

model_conv = train_model(model_conv, criterion, optimizer_conv,
                         exp_lr_scheduler, num_epochs=3)

visualize_model(model_conv)

plt.ioff()
plt.show()